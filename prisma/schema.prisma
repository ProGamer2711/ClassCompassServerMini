generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Role {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    name       String   @unique
    attributes String[] @default([])

    schoolId String @db.ObjectId
    school   School @relation(fields: [schoolId], references: [id])

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deleted   Boolean   @default(false)
    deletedAt DateTime?
    User      User?     @relation(fields: [userId], references: [id])
    userId    String?   @db.ObjectId

    // The role name should be unique within a school
    @@unique([schoolId, name])
    @@index([schoolId])
}

model User {
    id       String @id @default(auto()) @map("_id") @db.ObjectId
    name     String
    email    String @unique
    password String

    schoolId String @db.ObjectId
    school   School @relation(fields: [schoolId], references: [id])

    roles Role[]

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deleted   Boolean   @default(false)
    deletedAt DateTime?
    // deletedBy String?

    @@index([schoolId])
}

model School {
    id   String @id @default(auto()) @map("_id") @db.ObjectId
    name String @unique

    classes Class[]

    teachers Teacher[]

    roles Role[]

    users User[]

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deleted   Boolean   @default(false)
    deletedAt DateTime?
    // deletedBy String?
}

/**
 * TODO: Remove the schoolId and name from the teacher and student models
 * TODO: since they are already associated with a school through the class model
 */
model Teacher {
    id   String @id @default(auto()) @map("_id") @db.ObjectId
    name String

    schoolId String @db.ObjectId
    school   School @relation(fields: [schoolId], references: [id])

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deleted   Boolean   @default(false)
    deletedAt DateTime?
    // deletedBy String?

    @@index([schoolId])
}

model Class {
    id   String @id @default(auto()) @map("_id") @db.ObjectId
    name String

    schoolId String @db.ObjectId
    school   School @relation(fields: [schoolId], references: [id])

    students Student[]

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deleted   Boolean   @default(false)
    deletedAt DateTime?
    // deletedBy String?

    // The class name should be unique within a school
    @@unique([schoolId, name])
    @@index([schoolId])
}

model Student {
    id   String @id @default(auto()) @map("_id") @db.ObjectId
    name String

    classId String @db.ObjectId
    class   Class  @relation(fields: [classId], references: [id])

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deleted   Boolean   @default(false)
    deletedAt DateTime?
    // deletedBy String?

    @@index([classId])
}
